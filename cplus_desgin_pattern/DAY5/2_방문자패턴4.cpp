// 방문자 패턴의 의미!!
class Shape
{
	virtual void Draw() = 0;
};
class Rect : public Shape {};
class Circle : public Shape {};

// 전통적인 객체지향 디자인 - ? 자리에 (1). 쉽다  (2). 어렵다 로 채워 보세요.
// 클래스의 추가    : 쉽다. 다형성을 잘 활용해서 설계 했다면...
// 
// 가상 함수의 추가 : 어렵다. Shape 에 추가하는 순간, 모든 도형에서 
//						override 하는 코드를 추가해야 한다.



// 그런데, Move()라는 가상함수를 추가하지말고!!
ShapeMoveVisitor v;	// 복합객체의 모든 도형을 움직이는 방문자
컨테이너.accept(&v); // 이렇게 하면 ??




// 방문자 패턴으로 디자인 하면
// 클래스의 추가               : 어렵다.
//							   메뉴 예제에서 "SpecialMenu" 같은 타입이 추가되면
//								IMenuVisitor 인터페이스가 수정되게 됩니다.
//								모든 방문자를 변경해야 한다.
// 
// 가상 함수(오퍼레이션)의 추가 : 쉽다.
//					진짜로 가상함수의 추가가 아니라
//				    가상함수가 할일을 수행하는 방문자를 만든다는것




