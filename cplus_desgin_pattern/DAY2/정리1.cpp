// 정리1.cpp

// 객체지향 디자인의 핵심 원리 1. 공통성과 가변성의 분리
// => 변하지 않은 코드 내부에 숨은 변하는 부분을 분리하는 것

// 변하는 것을 어떻게 분리할것인가 ?

// 1. 변하는 것을 가상함수로
//    => 변경하려면 파생 클래스를 만들어서 가상함수 재정의!!
//    => template method 패턴
//    => 실행시간 교체 안되고, 변하는 정책을 클래스가 소유하게 된다.
// 
// 2. 변하는 것을 다른 함수로 만들고, 함수 포인터로 교체(C 스타일)
//    => 변하는 것이 함수 한개일때는 가능!
//    => "메뉴 이벤트 예제" 참고

// 3. 변하는 것을 다른 클래스로!!!
//    => 변하는 것을 담은 정책 클래스를 여러 클래스에서 사용할수 있다.
//    => 그런데, 정책 클래스를 어떻게 교체할까 ?

//    A. 인터페이스로 교체  - strategy(전략 패턴)
//			=> 실행시간 교체가능, 하지만 가상함수기반이므로 느리다.
//			=> Edit/IValidator 예제
// 
//    B. 템플릿 인자로 교체 - policy base(단위 전략)
//			=> 실행시간 교체 안됨. 하지만 인라인 치환 가능하므로 빠르다.
//			=> List 의 동기화 정책 교체
//			=> STL vector 의 allocator 교체 기술!!











